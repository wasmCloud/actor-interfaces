namespace "wasmcloud:blobstore"

role Store {
    """
    Create a container in a blobstore.
    Returns the container created if successful
    """
    CreateContainer(id: string): Container
    """
    Remove a container from a blobstore
    """
    RemoveContainer(id: string): BlobstoreResult
    """
    Remove an object from a blobstore
    """
    RemoveObject(id: string, container_id: string): BlobstoreResult
    """
    Returns a list of blobs that are present in the specified container
    """
    ListObjects(container_id: string): BlobList
    """
    Upload a file chunk to a blobstore, which may only be part of a full file.
    This must be called AFTER the StartUpload operation. Chunks should be
    small, as memory over a few megabytes may exceed the wasm memory allocation.
    """
    UploadChunk(chunk: FileChunk): BlobstoreResult
    """
    Issue a request to start a download from a blobstore. Chunks will be sent
    to the function that's registered with the ReceiveChunk operation.
    """
    StartDownload(blob_id: string, container_id: string, chunk_size: u64, context: string?): BlobstoreResult
    """
    Begin the upload process with the first chunk of a full file. Subsequent
    chunks should be uploaded with the UploadChunk operation.
    """
    StartUpload(chunk: FileChunk): BlobstoreResult
    """
    Retreives information about a blob
    """
    GetObjectInfo(blob_id: string, container_id: string): Blob
}

role Actor {
    """
    Defines a handler for incoming chunks forwarded by a
    wasmcloud:blobstore provider. Chunks may not be
    received in order.
    """
    ReceiveChunk(chunk: FileChunk): void
}

"""
Represents a single chunk that may comprise part of a
file or an entire file. The fields for sequence number,
total bytes and chunk bytes should be used to determine
the chunk order, as well as the optional context field.
"""
type FileChunk {
    sequenceNo: u64,
    container: Container,
    id: string,
    totalBytes: u64
    chunkSize: u64,
    context: string?,
    chunkBytes: bytes
}

"""
A container is a logical grouping of blobs, similar to a directory in a file system.
"""
type Container {
    id: string
}

"""
A wrapper object around a list of containers.
"""
type ContainerList {
    containers: [Container]
}

"""
A blob is a representation of an object in a blobstore, similar to a file
in a file system.
"""
type Blob {
    id: string
    container: Container
    byteSize: u64
}

"""
A wrapper object around a list of blobs.
"""
type BlobList {
    blobs: [Blob]
}

type Transfer {
    blobId: string
    container: Container
    chunkSize: u64
    totalSize: u64
    totalChunks: u64
    context: string?
}

"""
Used to return success and error information for common blobstore operations
"""
type BlobstoreResult {
    success: bool
    error: string?
}